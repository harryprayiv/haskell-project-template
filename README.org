#+TITLE: Haskell Project Template

This haskell project template contains a basic haskell setup using nix [[https://nixos.wiki/wiki/Flakes][flakes]]
and IOHK's [[https://github.com/input-output-hk/haskell.nix][haskell.nix]].

* Preconditions

** Flakes enabled

   Nix Flakes are still experimental. To use them, you'll have to enable them in
   your ~/etc/nixos/configuration.nix~:

   #+begin_src nix
     nix = {
       package = pkgs.nixFlakes;
       extraOptions = ''
         experimental-features = nix-command flakes
       '';
     };
   #+end_src

** Use IOHK binary cache

   To avoid compiling GHC, add IOHK's binary cache to
   ~/etc/nixos/configuration.nix~:

   #+begin_src nix
      nix = {
        binaryCachePublicKeys = [
          "hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ="
        ];
        binaryCaches = [
          "https://hydra.iohk.io"
        ];
      };
   #+end_src

* Usage

  1. Create new repository from template

     #+begin_src shell
     $ gh repo create $myrepo --template j0xaf/haskell-project-template
     #+end_src

  2. Initialize using ~cabal~

     #+begin_src shell
     $ nix-shell --run 'cabal init' -p cabal-install ghc
     #+end_src

  3. Enter the shell

     #+begin_src shell
     $ nix develop
     #+end_src

* Troubleshooting

** Garbage collection
  
   To prevent garbage collection while using ~nix develop~ there is
   unfortunately not yet the perfect solution. In particular
   [[https://github.com/nix-community/lorri]] does not yet support nix flakes.

   [[https://github.com/NixOS/nix/issues/4250][NixOS/nix#4250]] suggests using /profiles/ to manage gc roots:

   #+begin_src shell
     $ nix develop --profile ./foo # create profile
     $ nix develop ./foo # re-enter previously created profile
   #+end_src
